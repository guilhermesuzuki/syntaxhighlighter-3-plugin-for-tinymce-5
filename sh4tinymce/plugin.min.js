/*
* syntaxhighlighter TinyMCE plugin
* Released under LGPL License.
* 
* by Robin Calmejane
* http://nomadonweb.com
* 
* Plugin page :
* http://lab.nomadonweb/sh4tinymce
* 
*/
tinymce.PluginManager.requireLangPack('sh4tinymce');
tinymce.PluginManager.add('sh4tinymce', function (editor, url) {
	//editor.ui.registry.addIcon('sh4tinymce', '<svg viewBox="0 0 96 96" height="24px" width="24px" xmlns="http://www.w3.org/2000/svg"><title/><g><path d="M24.8452,25.3957a6.0129,6.0129,0,0,0-8.4487.7617L1.3974,44.1563a5.9844,5.9844,0,0,0,0,7.687L16.3965,69.8422a5.9983,5.9983,0,1,0,9.21-7.687L13.8068,48l11.8-14.1554A6,6,0,0,0,24.8452,25.3957Z"/><path d="M55.1714,12.1192A6.0558,6.0558,0,0,0,48.1172,16.83L36.1179,76.8262A5.9847,5.9847,0,0,0,40.8286,83.88a5.7059,5.7059,0,0,0,1.1835.1172A5.9949,5.9949,0,0,0,47.8828,79.17L59.8821,19.1735A5.9848,5.9848,0,0,0,55.1714,12.1192Z"/><path d="M94.6026,44.1563,79.6035,26.1574a5.9983,5.9983,0,1,0-9.21,7.687L82.1932,48l-11.8,14.1554a5.9983,5.9983,0,1,0,9.21,7.687L94.6026,51.8433A5.9844,5.9844,0,0,0,94.6026,44.1563Z"/></g></svg>');
	function showDialog() {
		/* Var declaration */
		var win, dom = editor.dom, selection = editor.selection, data = {}, Elmt;
		var shDefault = {}, defaultLanguage = 'html', selected = false, selectedCode, selectionNode = selection.getNode(), settings;

		/* Set default settings for SH and plugin */
		/***** DON'T CHANGE DEFAULTS *****/
		/* shDefault : Default SyntaxHighlighter settings */
		shDefault.autolinks = true;
		shDefault.collapse = false;
		shDefault.firstline = '1';
		shDefault.gutter = true;
		shDefault.highlight = '';
		shDefault.htmlscript = false;
		shDefault.tabsize = '4';
		shDefault.toolbar = true;

		/* data : plugin settings */
		data.language = '';
		data.autolinks = shDefault.autolinks;
		data.collapse = shDefault.collapse;
		data.firstline = shDefault.firstline;
		data.gutter = shDefault.gutter;
		data.highlight = shDefault.highlight;
		data.htmlscript = shDefault.htmlscript;
		data.tabsize = shDefault.tabsize;
		data.toolbar = shDefault.toolbar;
		/* End default settings */

		// List languages
		var languageItems = [
			{ text: 'Language', value: '' },
			{ text: 'ActionScript3', value: 'as3' },
			{ text: 'Bash/shell', value: 'bash' },
			{ text: 'ColdFusion', value: 'cf' },
			{ text: 'C#', value: 'csharp' },
			{ text: 'C++', value: 'cpp' },
			{ text: 'CSS', value: 'css' },
			{ text: 'Delphi', value: 'delphi' },
			{ text: 'Diff', value: 'diff' },
			{ text: 'Erlang', value: 'erl' },
			{ text: 'Groovy', value: 'groovy' },
			{ text: 'HTML', value: 'html' },
			{ text: 'Java', value: 'java' },
			{ text: 'JavaFX', value: 'jfx' },
			{ text: 'JavaScript', value: 'js' },
			{ text: 'Perl', value: 'perl' },
			{ text: 'PHP', value: 'php' },
			{ text: 'PowerShell', value: 'ps' },
			{ text: 'Python', value: 'py' },
			{ text: 'Ruby', value: 'ruby' },
			{ text: 'Scala', value: 'scala' },
			{ text: 'SQL', value: 'sql' },
			{ text: 'Text', value: 'plain' },
			{ text: 'Visual Basic', value: 'vb' },
			{ text: 'XML', value: 'xml' }
		];

		// Get settings of SH existing code
		function getSHSettings(settings) {
			var s = settings.split(';');
			var settingsObj = {};
			for (var i = 0; i < s.length; i++) {
				var o = s[i].split(':');
				settingsObj[o[0].replace(/\-/g, '')] = o[1];
			}
			tinymce.each(settingsObj, function (value, setting) {
				if (setting == 'brush') {
					if (data.language != value)
						data.language = value;
				} else {
					value = value == 'true' ? true : (value == 'false' ? false : value);
					if (setting == 'highlight') value = value.replace(/\[/g, "").replace(/\]/g, "");
					data[setting] = value;
				}
			});
		}

		// Check code/text selection in tinyMCE editor
		if (selectionNode.nodeName.toLowerCase() == 'pre'
			&& selectionNode.className.indexOf('brush:') != -1) {
			// This is an SH code
			selected = true;
			selectedCode = $(selectionNode).html();
			selectedCode = selectedCode.replace(/\&lt\;/gi, "<").replace(/\&gt\;/gi, ">");
			/* We have to get SH settings from classname */
			settings = selectionNode.className;
			settings = settings.replace(/ /g, '');
			getSHSettings(settings);
		} else {
			// This is a simple selection
			selectedCode = selection.getContent({ format: 'text' });
			data.autolinks = false;
			data.toolbar = false;
		}

		// Select language item list
		for (var i = 0; i < languageItems.length; i++) {
			if (languageItems[i].value == data.language) {
				languageItems[i].selected = true;
			}
		}

		data.code = selectedCode;
		if (data.code == '&nbsp;')
			data.code = '';

		function onSubmitFunction(e) {

			console.log(e);

			var code = e.getData().code;
			code = code.replace(/\</g, "&lt;").replace(/\>/g, "&gt;");
			/* Convert settings into strings for classname */
			var language = e.getData().language ? e.getData().language : defaultLanguage;
			var collapse = e.getData().collapse != shDefault.collapse ? ';collapse:' + e.getData().collapse : '';
			var autolinks = e.getData().autolinks != shDefault.autolinks ? ';auto-links:' + e.getData().autolinks : '';
			var gutter = e.getData().gutter != shDefault.gutter ? ';gutter:' + e.getData().gutter : '';
			var htmlscript = e.getData().htmlscript != shDefault.htmlscript ? ';html-script:' + e.getData().htmlscript : '';
			var toolbar = e.getData().toolbar != shDefault.toolbar ? ';toolbar:' + e.getData().toolbar : '';
			var firstline = e.getData().firstline != shDefault.firstline ? ';first-line:' + e.getData().firstline : '';
			var hlstart = e.getData().highlight.indexOf(",") != -1 ? "[" : "",
				hlend = e.getData().highlight.indexOf(",") != -1 ? "]" : "";
			var highlight = e.getData().highlight.replace(/ /g, "").replace(/\[/g, "").replace(/\]/g, "") != shDefault.highlight ? ';highlight:' + hlstart + e.getData().highlight.replace(/ /g, "").replace(/\[/g, "").replace(/\]/g, "").replace(/,$/g, "") + hlend : '';
			var tabsize = e.getData().tabsize != shDefault.tabsize ? ';tab-size:' + e.getData().tabsize : '';

			// Create SH element with string settings
			Elmt = editor.dom.create('pre',
				{
					class: 'brush:' + language + collapse + autolinks + gutter + htmlscript + toolbar + firstline + highlight + tabsize,
					contenteditable: 'false'
				},
				code);

			if (selected)
				editor.dom.replace(Elmt, selectionNode);
			else
				editor.insertContent(editor.dom.getOuterHTML(Elmt) + '<br>');

			//closes the window up
			e.close();
		}

		win = editor.windowManager.open({
			title: 'SH4TinyMCE - Code Editor',
			data: data,
			size: "medium",
			initialData: {
				"language": data.language,
				"code": data.code,
				"collapse": data.collapse,
				"autolinks": data.autolinks,
				"gutter": data.gutter,
				"htmlscript": data.htmlscript,
				"toolbar": data.toolbar,
				"firstline": data.firstline,
				"highlight": data.highlight,
				"tabsize": data.tabsize,
			},
			body: {
				type: 'panel', 
				items: [ 
					{ name: 'language', type: 'listbox', items: languageItems },
					{ name: 'code', type: 'textarea', placeholder: 'Type your code here', },
					{
						type: 'panel',
						layout: 'flex',
						direction: 'row',
						align: 'center',
						spacing: 7,
						items: [
							{
								type: 'grid', columns: 5, items: [
									{ name: 'collapse', type: 'checkbox', label: 'Collapse', checked: data.collapse },
									{ name: 'autolinks', type: 'checkbox', label: 'Autolinks', checked: data.autolinks },
									{ name: 'gutter', type: 'checkbox', label: 'Gutter', checked: data.gutter },
									{ name: 'htmlscript', type: 'checkbox', label: 'Html script', checked: data.htmlscript },
									{ name: 'toolbar', type: 'checkbox', label: 'Toolbar', checked: data.toolbar }
								]
							},
						]
					},
					{
						type: 'panel',
						padding: 0,
						labelGap: 5,
						spacing: 5,
						direction: 'row',
						items: [
							{
								type: 'grid', columns: 3, items: [
									{ name: 'firstline', type: 'input', label: 'First Line', size: 3, value: data.firstline },
									{ name: 'highlight', type: 'input', label: 'Highlight', size: 10, value: data.highlight },
									{ name: 'tabsize', type: 'input', label: 'Tab size', size: 3, value: data.tabsize },
								]
							},
						]
					}
				]
			},
			buttons: [
				{
					type: "submit",
					text: "Ok",
				},
				{
					type: "cancel",
					text: "Cancel",
				},
			],
			onSubmit: onSubmitFunction
		});
	}
	tinymce.DOM.loadCSS(url + '/style/style.css');
	editor.ui.registry.addButton('sh4tinymce', {
		icon: 'code-sample',
		tooltip: 'Insert/Edit Code',
		onAction: showDialog
	});
	editor.ui.registry.addMenuItem('sh4tinymce', {
		text: 'SH4TinyMCE',
		icon: 'code-sample',
		context: 'insert',
		onAction: showDialog
	});
});